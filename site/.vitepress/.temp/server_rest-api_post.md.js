import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Create user corpus","description":"","frontmatter":{},"headers":[],"relativePath":"server/rest-api/post.md","filePath":"server/030_rest-api/_post.md","lastUpdated":1749114403000}');
const _sfc_main = { name: "server/rest-api/post.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="create-user-corpus" tabindex="-1">Create user corpus <a class="header-anchor" href="#create-user-corpus" aria-label="Permalink to &quot;Create user corpus&quot;">​</a></h1> <p>Add a user corpus.</p> <p><strong>URL</strong> : <code>/blacklab-server</code></p> <p><strong>Method</strong> : <code>POST</code></p> <p><strong>Auth required</strong>: YES</p> <h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4> <ul><li><code>name</code>: name for the new corpus. Must start with the user id, followed by a <code>:</code>, followed by a short index name (which must consist of letters, digits, underscore <code>_</code>, dash <code>-</code> or period <code>.</code>). Will become part of the URL. Example: (e.g. <code>jan.niestadt@ivdnt.org:my-fun-corpus</code>)</li> <li><code>display</code>: display name for the new corpus (e.g. <code>My fun corpus!</code>)</li> <li><code>format</code>: default input format name for the new corpus (e.g. <code>tei-p5</code>). Must refer to an available input format.</li></ul> <h2 id="success-response" tabindex="-1">Success Response <a class="header-anchor" href="#success-response" aria-label="Permalink to &quot;Success Response&quot;">​</a></h2> <p><strong>Code</strong> : <code>201 Created</code></p> <h3 id="content-example" tabindex="-1">Content example <a class="header-anchor" href="#content-example" aria-label="Permalink to &quot;Content example&quot;">​</a></h3> <div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-light-font-style": "italic", "--shiki-dark": "#FDAEB7", "--shiki-dark-font-style": "italic" })}">    code</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;SUCCESS&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-light-font-style": "italic", "--shiki-dark": "#FDAEB7", "--shiki-dark-font-style": "italic" })}">    message</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;Index created succesfully.&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre></div><h2 id="error-response" tabindex="-1">Error Response <a class="header-anchor" href="#error-response" aria-label="Permalink to &quot;Error Response&quot;">​</a></h2> <p><strong>Code</strong>: <code>403 Forbidden</code></p> <h3 id="content-example-1" tabindex="-1">Content example <a class="header-anchor" href="#content-example-1" aria-label="Permalink to &quot;Content example&quot;">​</a></h3> <div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-light-font-style": "italic", "--shiki-dark": "#FDAEB7", "--shiki-dark-font-style": "italic" })}">    code</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;FORBIDDEN_REQUEST&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#B31D28", "--shiki-light-font-style": "italic", "--shiki-dark": "#FDAEB7", "--shiki-dark-font-style": "italic" })}">    message</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&quot;You can only create indices in your own private area.&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">}</span></span></code></pre></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2> <p>The URL for the new corpus will be <code>/blacklab-server/userid:name/</code>, so e.g. <code>/blacklab-server/jan.niestadt@ivdnt.org:my-fun-corpus/</code>.</p> <p>To add documents, POST to <code>/blacklab-server/userid:name/docs/</code>. See <a href="./corpus/docs/post.html">here</a>.</p> <h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-label="Permalink to &quot;TODO&quot;">​</a></h2> <ul><li>The response should probably return the URL for the new corpus.</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("server/030_rest-api/_post.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _post = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _post as default
};
