import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Parallel corpus querying","description":"","frontmatter":{},"headers":[],"relativePath":"guide/query-language/parallel.md","filePath":"guide/040_query-language/030_parallel.md","lastUpdated":1749639304000}');
const _sfc_main = { name: "guide/query-language/parallel.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="parallel-corpus-querying" tabindex="-1">Parallel corpus querying <a class="header-anchor" href="#parallel-corpus-querying" aria-label="Permalink to &quot;Parallel corpus querying&quot;">​</a></h1> <div class="tip custom-block"><p class="custom-block-title">Supported from v4.0</p> <p>Indexing and searching parallel corpoora will be supported from BlackLab 4.0 (and current development snapshots).</p></div> <p>A parallel corpus is a corpus that contains multiple versions of the corpus content, usually from different languages and/or time periods, and record the alignment between the versions at different levels (e.g. paragraph, sentence, word).</p> <p>For example, you could have a parallel corpus of EU Parliament discussions in the various European languages, or a parallel corpus of different translations of a classic work such as Homer&#39;s Odyssey.</p> <p>See <a href="./../index-your-data/parallel-corpora.html">indexing parallel corpora</a>.</p> <p>BlackLab&#39;s parallel corpus functionality uses cross-field relations to find alignments between the content versions available in your corpus.</p> <p>The alignments operator <code>==&gt;</code> is specifically to find alignments between versions in your corpus. It essentially means &quot;capture all relations between (part of) the left and right span&quot;. It will capture a list of relations in the response.</p> <h2 id="basic-parallel-querying" tabindex="-1">Basic parallel querying <a class="header-anchor" href="#basic-parallel-querying" aria-label="Permalink to &quot;Basic parallel querying&quot;">​</a></h2> <p>For example, if your corpus contains fields <code>contents__en</code> (English version) and <code>contents__nl</code> (Dutch version), and English is the default field (the first one defined in your indexing config), you can find the Dutch translation of an English word using:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;cat&quot; ==&gt;nl _</span></span></code></pre></div><p>The hit for this query will be <code>cat</code> in the English field, and the match info will contain a group named <code>rels</code> with all alignment relations found (just the one in this case, between the word <code>cat</code> and its Dutch equivalent). The hit response structure will also contain an <code>otherFields</code> section containing the corresponding Dutch content fragment. The location of the Dutch word aligned with the English word <code>cat</code> can be found from the relation in the <code>rel</code> capture, which includes <code>targetField</code>, <code>targetStart</code> and <code>targetEnd</code>.</p> <p>Assuming your data has both sentence and word alignments, and you want to find all alignments for a sentence containing <code>cat</code>, you could use:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;s/&gt; containing &quot;cat&quot; ==&gt;nl _</span></span></code></pre></div><p>This should find aligning English and Dutch sentences, including any word alignments between words in those sentences. You can also filter by alignment type, as we&#39;ll show later.</p> <details class="details custom-block"><summary>Required versus optional alignment</summary> <p>The <code>==&gt;</code> operator will <em>require</em> that an alignment exists. If you wish to see all hits on the left side of the <code>==&gt;nl</code> regardless of whether any alignments to the right side can be found, use <code>==&gt;nl?</code>.</p> <p>For example, if you&#39;re searching for translations of <code>cat</code> to Dutch, with <code>==&gt;nl</code> you will <em>only</em> see instances where <code>cat</code> is aligned to a Dutch word; on the other hand, with <code>==&gt;nl?</code> you will see both English <code>cat</code> hits where the translation to Dutch was found, and <code>cat</code> hits where it wasn&#39;t.</p></details> <h2 id="switching-the-main-search-field" tabindex="-1">Switching the main search field <a class="header-anchor" href="#switching-the-main-search-field" aria-label="Permalink to &quot;Switching the main search field&quot;">​</a></h2> <p>If you want to search the Dutch version instead, and find alignments with the English version, you would use this query:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;kat&quot; ==&gt;en _</span></span></code></pre></div><p>But of course, the main search field shouldn&#39;t be <code>contents__en</code> in this case; we want to switch it to <code>contents__nl</code>. You can specify a main search field other than the default with the BLS parameter <code>field</code>. In this case, if you specify <code>field=nl</code>. BlackLab will automatically recognize that you&#39;re specifying a version of the main annotated field and use the correct &#39;real&#39; field, probably <code>contents__nl</code> in this case.</p> <h2 id="filtering-the-target-span" tabindex="-1">Filtering the target span <a class="header-anchor" href="#filtering-the-target-span" aria-label="Permalink to &quot;Filtering the target span&quot;">​</a></h2> <p>In the previous example, we used <code>_</code> as the target span. This is the default, and means &quot;the best matching span&quot;.</p> <p>But you can also specify a different target span. For example, to find where <em>fluffy</em> was translated to <em>pluizig</em>:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;fluffy&quot; ==&gt;nl &quot;pluizig&quot;</span></span></code></pre></div><p>This will execute the left and right queries on their respective fields and match the hits by their alignment relations.</p> <h2 id="multiple-alignment-queries" tabindex="-1">Multiple alignment queries <a class="header-anchor" href="#multiple-alignment-queries" aria-label="Permalink to &quot;Multiple alignment queries&quot;">​</a></h2> <p>You can also use multiple alignment operators in a single query to match to more than one other version:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;fluffy&quot; ==&gt;nl &quot;pluizig&quot; ;</span></span>
<span class="line"><span>         ==&gt;de &quot;flauschig&quot;</span></span></code></pre></div><h2 id="only-matching-some-alignment-relations" tabindex="-1">Only matching some (alignment) relations <a class="header-anchor" href="#only-matching-some-alignment-relations" aria-label="Permalink to &quot;Only matching some (alignment) relations&quot;">​</a></h2> <p>Just like with other relations queries, you can filter by type:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;fluffy&quot; =word=&gt;nl &quot;pluizig&quot;</span></span></code></pre></div><p>This will only find relations of type <code>word</code>. The type filter will automatically determine the capture name as well, so any relation(s) found will be captured as <code>word</code> in this case instead of <code>rels</code> (unless an explicit name is assigned, see below).</p> <h2 id="renaming-the-relations-capture" tabindex="-1">Renaming the relations capture <a class="header-anchor" href="#renaming-the-relations-capture" aria-label="Permalink to &quot;Renaming the relations capture&quot;">​</a></h2> <p>You can use a override the default name <code>rels</code> for the alignment operator&#39;s captures:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;s/&gt; alignments:==&gt;nl _</span></span></code></pre></div><p>Now the alignment relations will be captured in a group named <code>alignments</code>.</p> <h2 id="capturing-in-target-fields" tabindex="-1">Capturing in target fields <a class="header-anchor" href="#capturing-in-target-fields" aria-label="Permalink to &quot;Capturing in target fields&quot;">​</a></h2> <p>You can capture parts of the target query like normal, e.g.:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;and&quot; w1:[] ==&gt;nl &quot;en&quot; w2:[]</span></span></code></pre></div><p>There will be one match info named <code>w1</code> for the primary field searched (English in this case), and one named <code>w2</code> for the target field (Dutch).</p> <h2 id="rfield-get-only-hits-from-a-target-field" tabindex="-1">rfield(): get only hits from a target field <a class="header-anchor" href="#rfield-get-only-hits-from-a-target-field" aria-label="Permalink to &quot;rfield(): get only hits from a target field&quot;">​</a></h2> <p>If you only want to see hits from the target field, you can use the <code>rfield</code> operator:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rfield(&quot;fluffy&quot; =word=&gt;nl &quot;pluizig&quot;, &quot;nl&quot;)</span></span></code></pre></div><p>This can be useful when, after running a parallel query, you want to show the highlighted contents of one of the target fields. In this case, you would like to only get the target hits (in <code>contents__nl</code>), not the source hits (in e.g. <code>contents__en</code>).</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/040_query-language/030_parallel.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _030_parallel = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _030_parallel as default
};
