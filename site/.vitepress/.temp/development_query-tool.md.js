import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"QueryTool","description":"","frontmatter":{},"headers":[],"relativePath":"development/query-tool.md","filePath":"development/030_query-tool.md","lastUpdated":1749639304000}');
const _sfc_main = { name: "development/query-tool.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="querytool" tabindex="-1">QueryTool <a class="header-anchor" href="#querytool" aria-label="Permalink to &quot;QueryTool&quot;">​</a></h1> <h2 id="what-is-it" tabindex="-1">What is it? <a class="header-anchor" href="#what-is-it" aria-label="Permalink to &quot;What is it?&quot;">​</a></h2> <p>QueryTool is a simple command-driven search tool that provides a demonstration of the querying features of BlackLab. It allows you to search a corpus, for example to test that indexing was succesful.</p> <h2 id="starting-the-querytool" tabindex="-1">Starting the QueryTool <a class="header-anchor" href="#starting-the-querytool" aria-label="Permalink to &quot;Starting the QueryTool&quot;">​</a></h2> <p>Once you&#39;ve indexed your data (see <a href="/guide/getting-started.html">Getting Started</a>), you can start QueryTool to test if indexing went well:</p> <div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">java</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -cp</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;blacklab-VERSION.jar:lib&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> nl.inl.blacklab.tools.QueryTool</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> /data/blacklab-corpora/my-corpus</span></span></code></pre></div><p>You can type a <a href="/guide/query-language/">BCQL</a> query at the prompt.</p> <p>Here&#39;s a few things to try:</p> <ul><li>Type <code>help</code> to see a list of commands.</li> <li>For a simple query, just enclose each word between double quotes: <code>&quot;the&quot; &quot;egg&quot;</code> searches for &quot;the&quot; followed by &quot;egg&quot;</li> <li>You can user regular expressions: <code>&quot;.*g&quot;</code> searches for words ending with &#39;g&#39;</li> <li>If you want to get more of a feel for what kinds of matches were found, try grouping by matched text using the command &quot;group match&quot;. Then, if you want to view one of the groups, use <code>group *n*</code>.</li> <li>Type <code>struct</code> to see the structure of the corpus, including available annotations and metadata fields.</li> <li>If you have a <code>lemma</code> annotation, you can use <code>[lemma=&quot;work&quot;]</code> to find forms of the verb &quot;work&quot;. Similarly, if you have a <code>pos</code> annotation, you can use <code>[pos=&quot;NOU-C&quot;]</code> to find common nouns.</li></ul> <h2 id="paging-sorting-and-grouping" tabindex="-1">Paging, sorting and grouping <a class="header-anchor" href="#paging-sorting-and-grouping" aria-label="Permalink to &quot;Paging, sorting and grouping&quot;">​</a></h2> <p>As a first query, type e.g. <code>&quot;the&quot;</code> and press Enter. The first twenty hits for this query are shown. To page through the results, use the commands <code>next</code> and <code>previous</code> (or their one-letter abbreviations). You can also change the number of hits displayed per page by using the <code>pagesize</code> command followed by a number.</p> <p>You can sort the hits using the command <code>sort &lt;criterium&gt;</code>. The criterium can be e.g. <code>match</code>, <code>left</code> or <code>right</code>. <code>match</code> sorts by matched text, <code>left</code> sorts by left context (the text to the left of the matched text), and <code>right</code> sorts by right context. You can also specify an annotation to sort on, e.g. <code>word</code>, <code>lemma</code>, or <code>pos</code>. If you don&#39;t specify this, hits will be sorted by <code>word</code>.</p> <p>You can group the hits using <code>group &lt;criterium&gt;</code>. Again, <code>match</code>, <code>left</code> and <code>right</code> can be used. Here, <code>left</code> and <code>right</code> group on the single word occurring to the left or right of the matched text. Just like sort, you can optionally specify an annotation (<code>word</code>, <code>lemma</code>, <code>pos</code>) to group on. <code>word</code> is the default.</p> <p>Once you group hits, you enter group mode. The groups are displayed in columns: group number, group size and group identity. If there are many groups, you can page through the groups using the same command as for hits. You can also sort the groups by <code>identity</code> or <code>size</code>.</p> <p>To examine the hits in a group, enter <code>group n</code>, where n is the group number displayed at the beginning of the line (the second number is the group size). To leave group mode and go back to showing all hits, enter <code>hits</code>. To get back to group mode, enter <code>groups</code>.</p> <h2 id="blacklab-corpus-query-language-bcql" tabindex="-1">BlackLab Corpus Query Language (BCQL) <a class="header-anchor" href="#blacklab-corpus-query-language-bcql" aria-label="Permalink to &quot;BlackLab Corpus Query Language (BCQL)&quot;">​</a></h2> <p>The demo starts out in BlackLab Corpus Query Language (BCQL) mode, which by far the most versatile of the supported languages. This query language expresses queries as sequences of token queries. It is therefore mainly useful to find specific types of phrases in a larger text.</p> <p>An example of a simple query (note that the quotes are required):</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;the&quot; &quot;tab.\\*&quot;</span></span></code></pre></div><p>This searches for the word <em>the</em> followed by a word starting with <em>tab</em>, such as <em>table</em>. As you can see, regular expressions can be used to build token queries.
Equivalent to the above query is:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[word=&quot;the&quot;] [word=&quot;tab.\\*&quot;]</span></span></code></pre></div><p>In addition to using regular expressions to express single-token restrictions, a similar notation can be used to express restrictions on sequences of tokens. For example:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;no.\\*&quot;{2,}</span></span></code></pre></div><p>This query finds two or more successive words starting with <em>no</em>, for example <em>no nonsense</em>. You can also use the regular expression operators such as <code>*</code>, <code>+</code> and <code>?</code> to build multi-token regular expressions:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;in&quot; &quot;the&quot;? &quot;great&quot; &quot;la.\\*&quot;</span></span></code></pre></div><p>If your corpus is tagged with <code>lemma</code> (head word) and part of speech, you can search for these features as well:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[lemma=&quot;be&quot;] [lemma=&quot;stay&quot;]</span></span></code></pre></div><p>This find forms of these verbs occurring together, e.g. <em>is staying</em>.</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[pos=&quot;a.\\*&quot;]+ &quot;man&quot;</span></span></code></pre></div><p>This finds the word <em>man</em> with one or more adjectives applied to it.</p> <p>For much more about BCQL, see the <a href="/guide/query-language/">Corpus Query Language</a> documentation.</p> <h2 id="querytool-reference" tabindex="-1">QueryTool reference <a class="header-anchor" href="#querytool-reference" aria-label="Permalink to &quot;QueryTool reference&quot;">​</a></h2> <h3 id="corpusql-examples" tabindex="-1">CorpusQL examples <a class="header-anchor" href="#corpusql-examples" aria-label="Permalink to &quot;CorpusQL examples&quot;">​</a></h3> <p>Find words starting with &quot;sta&quot;:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;sta.\\*&quot;</span></span></code></pre></div><p>Find &quot;man&quot; preceded by at least 2 adjectives:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[type=&quot;a.\\*&quot;]{2,} &quot;man&quot;</span></span></code></pre></div><p>Find &quot;stad&quot; and &quot;dorp&quot; with one word in between:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;stad&quot; [] &quot;dorp&quot;</span></span></code></pre></div><p>Find &quot;stad&quot; and &quot;dorp&quot; with 2-10 words in between:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;stad&quot; []{2,10} &quot;dorp&quot;</span></span></code></pre></div><p>Find all words:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[]</span></span></code></pre></div><p>Find all bigrams:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[] []</span></span>
<span class="line"><span>[]{2}</span></span></code></pre></div><p>&quot;de&quot; at the start of a named entity:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne\\&gt; &quot;de&quot;</span></span></code></pre></div><p>&quot;poorter&quot; at the end of a named entity:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;poorter&quot; &lt;/ne\\&gt;</span></span></code></pre></div><p>Named entities containing &quot;de&quot;:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne/\\&gt; containing &quot;de&quot;</span></span></code></pre></div><p>&quot;de&quot; within a named entity:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;de&quot; within &lt;ne/\\&gt;</span></span></code></pre></div><p>All named entities:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne/\\&gt;</span></span></code></pre></div><p>All persons:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne type=&quot;per&quot;/\\&gt;</span></span></code></pre></div><p>Person names containing &quot;van&quot;:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne type=&quot;per&quot;/\\&gt; containing &quot;van&quot;</span></span></code></pre></div><p>Locations starting with &quot;de&quot;:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;ne type=&quot;loc&quot; /\\&gt; containing &lt;ne\\&gt; &quot;de&quot;</span></span></code></pre></div><h3 id="other-commands" tabindex="-1">Other commands <a class="header-anchor" href="#other-commands" aria-label="Permalink to &quot;Other commands&quot;">​</a></h3> <p>Grouping</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>group match</span></span>
<span class="line"><span>group match lemma</span></span>
<span class="line"><span>group match pos</span></span></code></pre></div><p>Sorting</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sort left</span></span>
<span class="line"><span>sort right lemma</span></span></code></pre></div><p>Paging through results:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>n(ext)</span></span>
<span class="line"><span>p(revious)</span></span></code></pre></div><p>Change context size (number of words around hit):</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>context 3</span></span>
<span class="line"><span>context 10</span></span></code></pre></div><p>Show document title in KWIC view:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>doctitle on</span></span>
<span class="line"><span>doctitle off</span></span></code></pre></div><p>Case/diacritics-sensitivity:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sensitive on</span></span>
<span class="line"><span>sensitive off</span></span></code></pre></div><p>Filter on metadata (uses Lucene query syntax):</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>filter title.level1:&quot;courant&quot;</span></span>
<span class="line"><span>filter author.level1:&quot;jansen&quot;</span></span>
<span class="line"><span>filter author.level1:&quot;sterkenburg&quot; author.level2:&quot;sterkenburg&quot;</span></span>
<span class="line"><span>filter (Filter weer leegmaken)</span></span></code></pre></div><p>Show corpus structure:</p> <div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>struct</span></span>
<span class="line"><span>structure</span></span></code></pre></div><h3 id="commandline-editing" tabindex="-1">Commandline editing <a class="header-anchor" href="#commandline-editing" aria-label="Permalink to &quot;Commandline editing&quot;">​</a></h3> <p>Commandline editing is available if the <a href="http://jline.sourceforge.net/" target="_blank" rel="noreferrer">JLine</a> JAR is found on the classpath.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("development/030_query-tool.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _030_queryTool = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _030_queryTool as default
};
