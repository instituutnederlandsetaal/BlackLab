import{_ as e,c as i,o as s,al as t}from"./chunks/framework.B3j7FRen.js";const u=JSON.parse('{"title":"Write a DocIndexer (legacy)","description":"","frontmatter":{},"headers":[],"relativePath":"development/customization/legacy-docindexers.md","filePath":"development/040_customization/030_legacy-docindexers.md","lastUpdated":1749642828000}'),n={name:"development/customization/legacy-docindexers.md"};function o(l,a,h,d,r,p){return s(),i("div",null,a[0]||(a[0]=[t(`<h1 id="write-a-docindexer-legacy" tabindex="-1">Write a DocIndexer (legacy) <a class="header-anchor" href="#write-a-docindexer-legacy" aria-label="Permalink to &quot;Write a DocIndexer (legacy)&quot;">​</a></h1> <p>The following information is only relevant if you use the legacy DocIndexers instead of an input format configuration file (<code>.blf.yaml</code>).</p> <h2 id="passing-indexing-parameters" tabindex="-1">Passing indexing parameters <a class="header-anchor" href="#passing-indexing-parameters" aria-label="Permalink to &quot;Passing indexing parameters&quot;">​</a></h2> <p>You can pass parameters to the DocIndexer class to customize its indexing process. This can be done in two ways: as options on the IndexTool command line, or via a properties file.</p> <p>To pass a parameter as an option on the command line, use three dashes, like this:</p> <pre><code>java -cp &quot;blacklab.jar:lib/*&quot; nl.inl.blacklab.tools.IndexTool create ---PARAMNAME PARAMVALUE ...
</code></pre> <p>To pass parameters via a property file, use the --indexparam option:</p> <pre><code>java -cp &quot;blacklab.jar:lib/*&quot; nl.inl.blacklab.tools.IndexTool create --indexparam PROPERTYFILE ...
</code></pre> <p><strong>NOTE:</strong> in addition to the --indexparam parameter, IndexTool will always look for a file named indexer.properties in the current directory, the input directory, the parent of the input directory, or the corpus (i.e. output) directory. If the file is found in any of these locations, it is read and the values are used as indexing parameters.</p> <p>Use the DocIndexer.getParameter(name[, defaultValue]) method to retrieve parameters inside your DocIndexer. For an example of using DocIndexer parameters, see the DocIndexerTeiBase and MetadataFetcherSonarCmdi in the nl.inl.blacklab.indexers package. They use parameters to configure annotation names and where to fetch metadata from, respectively.</p> <p>Configuring an external metadata fetcher (see &quot;Metadata from an external source&quot; below) and case- and diacritics sensitivity (see next section) is also done using a indexing parameter for now. Note that this parameter passing mechanism predates the index structure file (see &quot;Configuring the index structure&quot; below) and is likely to be deprecated in favour of that in a future version.</p> <h2 id="configuring-case-and-diacritics-sensitivity-per-annotation" tabindex="-1">Configuring case- and diacritics sensitivity per annotation <a class="header-anchor" href="#configuring-case-and-diacritics-sensitivity-per-annotation" aria-label="Permalink to &quot;Configuring case- and diacritics sensitivity per annotation&quot;">​</a></h2> <p>You can also configure what &quot;sensitivity alternatives&quot; (case/diacritics sensitivity) to index for each annotation, using the &quot;PROPNAME_sensitivity&quot; parameter. Accepted values are &quot;i&quot; (both only insensitive), &quot;s&quot; (both only sensitive), &quot;si&quot; (sensitive and insensitive) and &quot;all&quot; (case/diacritics sensitive and insensitive, so 4 alternatives). What alternatives are indexed determines how specifically you can specify the desired sensitivity when searching.</p> <p>If you don&#39;t configure these, BlackLab will pick (hopefully) sane defaults (i.e. word/lemma get &quot;si&quot;, punct gets &quot;i&quot;, _relation/starttag gets &quot;s&quot;, others get &quot;i&quot;). (CAUTION: the special behaviour for word/lemma is deprecated. Please explictly configure the sensitivity for these annotations. Eventually they too will default to &quot;i&quot;)</p> <h2 id="configuring-the-corpus-structure" tabindex="-1">Configuring the corpus structure <a class="header-anchor" href="#configuring-the-corpus-structure" aria-label="Permalink to &quot;Configuring the corpus structure&quot;">​</a></h2> <p>What we call the &quot;corpus structure&quot; consists of some top-level corpus information (name, description, etc.), what word-level annotations
(formerly called &quot;properties&quot;) you want to index, what metadata fields there are and how they should be indexed, and more.</p> <p>By default, a default corpus structure is determined by BlackLab and the DocIndexer you&#39;re using. However, you can influence exactly
how your corpus is created using a customized corpus structure file. If you specify such an corpus structure file when creating the
corpus, it will be used as a template for the corpus metadata file, and so you won&#39;t have to specify the index structure file again
when updating your index later; all the information is now in the index metadata file. It is possible to edit the index metadata
file manually as well, but use caution, because it might break something.</p> <p>To use a custom indextemplate.yaml or indextemplate.json when creating an index, make sure the file is present either in the input
directory, or in the parent directory of the input directory. IndexTool will automatically detect and use it. The resulting index
metadata file will be saved in the index directory.</p> <p>Please note: the settings pidField, titleField, authorField, dateField refer to the name of the field in the Lucene index, not an XML element name.</p> <h2 id="when-and-how-to-disable-the-forward-index-for-an-annotation" tabindex="-1">When and how to disable the forward index for an annotation <a class="header-anchor" href="#when-and-how-to-disable-the-forward-index-for-an-annotation" aria-label="Permalink to &quot;When and how to disable the forward index for an annotation&quot;">​</a></h2> <p>By default, all properties get a forward index. The forward index is the complement to Lucene&#39;s reverse index, and can
quickly answer the question &quot;what value appears in position X of document Y?&quot;. This functionality is used to generate
snippets (such as for keyword-in-context (KWIC) views), to sort and group based on context words (such as sorting on the word left of the hit) and will in the future be used to speed up certain query types.</p> <p>However, forward indexes take up a lot of disk space and can take up a lot of memory, and they are not always needed for every
annotation. You should probably have a forward index for at least the word and punct annotations, and for any annotation you&#39;d like to sort/group on or that you use heavily in searching, or that you&#39;d like to display in KWIC views. But if you add an annotation that is only used in certain special cases, you can decide to disable the forward index for that annotation. You can do this by adding the annotation name to the &quot;noForwardIndexProps&quot; space-separated list in the indextemplate.json file shown above.</p> <p>A note about forward indexes and indexing multiple values at a single corpus position: as of right now, the forward index will only store the first value indexed at any position. We would like to expand this so that it is possible to quickly retrieve all values indexed at a corpus position, but that is not the case now.</p> <p>Note that if you want KWICs or snippets that include annotations without a forward index (as well the rest of the original XML), you can switch to using the original XML to generate KWICs and snippets, at the cost of speed. To do this, pass <code>usecontent=orig</code> to BlackLab Server, or call <code>Hits.settings().setConcordanceType(ConcordanceType.CONTENT_STORE)</code>.</p> <h2 id="custom-docindexers" tabindex="-1">Custom DocIndexers <a class="header-anchor" href="#custom-docindexers" aria-label="Permalink to &quot;Custom DocIndexers&quot;">​</a></h2> <h3 id="indexing-word-annotated-xml" tabindex="-1">Indexing word-annotated XML <a class="header-anchor" href="#indexing-word-annotated-xml" aria-label="Permalink to &quot;Indexing word-annotated XML&quot;">​</a></h3> <p>If you really want to implement your own DocIndexer class, see this <a href="./docindexer.html">example</a>.</p> <p>If you have an XML format in which each word has its own XML tag, containing any annotations, you should derive your DocIndexer class from DocIndexerXmlHandlers. This class allows you to add &#39;hooks&#39; for handling different XML elements.</p> <p>The constructor of your indexing class should call the superclass constructor, declare any annotations (e.g. lemma, pos) you&#39;re going to index and finally add hooks (called handlers)  for each XML element you want to do something with.</p> <p>Declaring annotations (formerly called &quot;properties&quot; in BlackLab) is done using the DocIndexerXmlHandlers.addAnnotation(String). Store the result in a final variable so you can access it from your custom handlers. Note that the &quot;main annotation&quot; (usually called &quot;word&quot;) and the &quot;punct&quot; annotation (whitespace and punctuation between words) have already been created by DocIndexerXmlHandlers; retrieve them using the mainAnnotation() and punctAnnotation() methods.</p> <p>Adding a handler is done using the DocIndexerXmlHandlers.addHandler(String, ElementHandler) method. The first parameter is an xpath-like expression that indicates the element to handle. The expression looks like xpath but is very limited: only element names separated by slashes; it may start with either a single (absolute path) or a double (relative path) slash. DocIndexerXmlHandlers defines several default ElementHandlers: ElementHandler (does nothing but keep track of whether we&#39;re inside this element), DocumentElementHandler (creates and adds document to the index), several metadata handlers that deal with different types of metadata elements (assuming the document contains its own metadata - see below for external metadata), InlineTagHandler (adds inline tags from the content to the index, such as &lt;p&gt;, &lt;s&gt; (sentence), &lt;b&gt;), several word handlers (indexes words and whitespace/punctuation between words). You can also easily create or derive your own, usually as an anonymous inner class that overrides the startElement() and endElement() methods.</p> <p>You need to add a handler for your document element (signifying the start and end of your logical documents; probably just use DocumentElementHandler), your word element (signifying a word to index; probably derive from WordHandlerBase), and any inline tags you wish to index (probably just use InlineTagHandler). Optionally, you may want to add a simple ElementHandler for your &quot;body&quot; tag, if you wish to restrict what part of the document is actually indexed; in this case, you should expand your word and inline tag handlers to check that you&#39;re inside this body element before processing the matched element.</p> <p>A word handler derived from DefaultWordHandler might retrieve lemma and part of speech from the attributes of the start tag and add them to the annotations you declared at the top of your DocIndexer-constructor. You can do this using the AnnotationWriter.addValue() method. DefaultWordHandler takes care of adding values to the standard annotations word and punct. For this, DefaultWordHandler assumes the word is simply the word element&#39;s text content. DefaultWordHandler also stores the character positions before and after the word (which are needed if you want to highlight in the original XML).</p> <p>An important note about adding values to annotations: it is crucial that you call AnnotationWriter.addValue() to each annotation an equal number of times! Each time you call addValue(), you move that annotation to the next corpus position, but other annotations do not automatically move to the next corpus position; it is up to you to make sure all annotations stay at the same corpus position. If a annotation has no value at a certain position, just add an empty string.</p> <p>You should probably call consumeCharacterContent(), which clears the buffer of captured text content in the document, at the start of a document (or at the start of the body element, if you handle that separately). This prevents the first punct value containing already captured text content you don&#39;t want. Similarly, before storing the document, you should add one last punct value (using consumeCharacterContent() to get the value to store), so the last bit of whitespace/punctuation isn&#39;t skipped. BlackLab assumes that there&#39;s always an &quot;extra closing token&quot; containing only the last bit of whitespace/punctuation.</p> <p>The <a href="./docindexer.html">tutorial</a> develops a simple TEI DocIndexer using the above techniques.</p> <h3 id="multiple-values-at-one-position-position-gaps-and-adding-annotation-values-at-an-earlier-position" tabindex="-1">Multiple values at one position, position gaps and adding annotation values at an earlier position <a class="header-anchor" href="#multiple-values-at-one-position-position-gaps-and-adding-annotation-values-at-an-earlier-position" aria-label="Permalink to &quot;Multiple values at one position, position gaps and adding annotation values at an earlier position&quot;">​</a></h3> <p>The AnnotationWriter.addValue(String) method adds a value to an annotation at the next corpus position. Sometimes you may want to add multiple values at a single corpus position, or you may want to skip a number of corpus positions. This can be done using the AnnotationWriter.addValue(String, Integer) method; the second parameter is the increment compared to the previous value. The default value for the increment is 1, meaning each value is indexed at the next corpus position.</p> <p>To add multiple values to a single corpus position, only use the default increment of 1 for the first value you want to add at this position; for all subsequent values at this position, use an increment of 0. Note: if the value you added first was the empty string, adding the next value with an increment of 0 will overwrite this empty string. This can be convenient if you&#39;re not sure whether you want to add any values at a particular location, but you want to make sure the annotation stays at the correct corpus position regardless.</p> <p>To skip a number of corpus positions when adding a value, use an increment that is higher than 1. So to skip one position (and therefore leave a &quot;gap&quot; one wide), use an increment of 2.</p> <p>Finally, you may sometimes wish to add values to an earlier corpus position. Say you&#39;re at position 100, and you want to add a value to position 50. You can do so using the AnnotationWriter.addValueAtPosition(String, Integer) method. The first token has position 0.</p> <h3 id="subannotations-for-e-g-making-part-of-speech-features-separately-searchable-experimental" tabindex="-1">Subannotations, for e.g. making part of speech features separately searchable (EXPERIMENTAL) <a class="header-anchor" href="#subannotations-for-e-g-making-part-of-speech-features-separately-searchable-experimental" aria-label="Permalink to &quot;Subannotations, for e.g. making part of speech features separately searchable (EXPERIMENTAL)&quot;">​</a></h3> <h3 id="storing-extra-information-with-annotation-values-using-payloads" tabindex="-1">Storing extra information with annotation values, using payloads <a class="header-anchor" href="#storing-extra-information-with-annotation-values-using-payloads" aria-label="Permalink to &quot;Storing extra information with annotation values, using payloads&quot;">​</a></h3> <p>It is possible to add payloads to annotation values. When calling addAnnotation() at the start of the constructor, make sure to use the version that takes a boolean called &#39;includePayloads&#39;, and set it to true. Then use AnnotationWriter.addPayload(). You can use null if a particular value has no payload. There&#39;s also a addPayloadAtIndex() method to add payloads some time after adding the value itself, but that requires knowing the index in the value list of the value you want to add a payload for, so you should store this index when you add the value.</p> <p>One example of using payloads can be seen in DocIndexerXmlHandlers.InlineTagHandler. When you use InlineTagHandler to index an inline element, say a sentence tag, BlackLab will index it to the &#39;_relation&#39; (or older &#39;starttag&#39;) annotation. When it encounters the end tag, it wil update the start tag value with a payload indication the element length. This is used when searching to determine what matches occur inside certain XML tags.</p> <h3 id="indexing-non-xml-file-types" tabindex="-1">Indexing non-XML file types <a class="header-anchor" href="#indexing-non-xml-file-types" aria-label="Permalink to &quot;Indexing non-XML file types&quot;">​</a></h3> <p>If your input files are not XML or are not tokenized and annotated per word, you have two options: convert them into a tokenized, per-word annotated format, or index them directly.</p> <p>Indexing them directly is not covered here, but involves deriving from DocIndexerAbstract or implementing the DocIndexer interface yourself. If you need help with this, please <a href="/guide/about.html#contact-us">contact us</a>.</p> <h2 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h2> <h3 id="in-document-metadata" tabindex="-1">In-document metadata <a class="header-anchor" href="#in-document-metadata" aria-label="Permalink to &quot;In-document metadata&quot;">​</a></h3> <p>Some documents contain metadata within the document. You usually want to index these as fields with your document, so you can filter on them later. You do this by adding a handler for the appropriate XML element.</p> <p>There&#39;s a few helper classes for in-document metadata handling. MetadataElementHandler assumes the matched element name is the name of your metadata field and the character content is the value. MetadataAttributesHandler stores all the attributes from the matched element as metadata fields. MetadataNameValueAttributeHandler assumes the matched element has a name attribute and a value attribute (the attribute names can be specified in the constructor) and stores those as metadata fields. You can of course easily add your own handler classes to this if they don&#39;t suit your particular style of metadata (have a look at nl.inl.blacklab.index.DocIndexerXmlHandlers.java to see how the predefined ones are implemented).</p> <h3 id="metadata-from-an-external-source" tabindex="-1">Metadata from an external source <a class="header-anchor" href="#metadata-from-an-external-source" aria-label="Permalink to &quot;Metadata from an external source&quot;">​</a></h3> <p>Sometimes, documents link to external metadata sources, usually using an ID.</p> <p>The MetadataFetcher is instantiated by DocIndexerXmlHandlers.getMetadataFetcher(), based on the metadataFetcherClass indexer parameter (see &quot;Passing indexing parameters&quot; above). This class is instantiated with the DocIndexer as a parameter, and the addMetadata() method is called just before adding a document to the index. Your particular MetadataFetcher can inspect the document to find the appropriate ID, fetch the metadata (e.g. from a file, database or webservice) and add it to the document using the DocIndexerXmlHandlers.addMetadataField() method.</p> <p>Also see the two MetadataFetcher examples in nl.inl.blacklab.indexers.</p> <h3 id="add-a-fixed-metadata-field-to-each-document" tabindex="-1">Add a fixed metadata field to each document <a class="header-anchor" href="#add-a-fixed-metadata-field-to-each-document" aria-label="Permalink to &quot;Add a fixed metadata field to each document&quot;">​</a></h3> <p>It is possible to tell IndexTool to add a metadata field with a specific value to each document indexed. An example of when this is useful is if you wish to combine several corpora into a single index, and wish to distinguish documents from the different corpora using this metadata field. You would achieve this by running IndexTool twice: once to create the index and add the documents from the first corpus, &quot;tagging&quot; them with a field named e.g. Corpus_title (which is the fieldname <a href="https://github.com/Taalmonsters/WhiteLab2.0" target="_blank" rel="noreferrer">Whitelab</a> expects) with an appropriate value indicating the first corpus. Then you would run IndexTool again, with command &quot;append&quot; to append documents to the existing index, and giving Corpus_title a different value for this set of documents.</p> <p>There&#39;s two ways to add this fixed metadata field for an IndexTool run. One is to pass an option &quot;---meta-Corpus_title mycorpusname&quot; (note the 3 dashes!) to the IndexTool. The other is to place a property &quot;meta-Corpus_title=mycorpusname&quot; in a file called indexer.properties in the current directory. This file can be used for other per-run IndexTool configuration; see below.</p> <h3 id="controlling-how-metadata-is-fetched-and-indexed" tabindex="-1">Controlling how metadata is fetched and indexed <a class="header-anchor" href="#controlling-how-metadata-is-fetched-and-indexed" aria-label="Permalink to &quot;Controlling how metadata is fetched and indexed&quot;">​</a></h3> <p>By default, metadata fields are tokenized, but it can sometimes be useful to index a metadata field without tokenizing it. One example of this is a field containing the document id: if your document ids contain characters that normally would indicate a token boundary, like a period (.) , your document id would be split into several tokens, which is usually not what you want. Use the indextemplate.json file (described above) to indicate you don&#39;t want a metadata field to be tokenized.</p> <h2 id="editing-the-index-metadata" tabindex="-1">Editing the index metadata <a class="header-anchor" href="#editing-the-index-metadata" aria-label="Permalink to &quot;Editing the index metadata&quot;">​</a></h2> <p>In addition to specifying this information in your input format configuration file as described above, it is also possible to edit the index metadata file manually. If you do this, be careful, because it might break something. It is best to use a text editor with support for YAML, and to validate the resulting file with a YAML validator such as <a href="http://www.yamllint.com/" target="_blank" rel="noreferrer">YAML Lint</a>. Also remember that if you edit the index metadata file, and you later decide to generate a new index from scratch, your changes to the metadata file will be lost. If possible, it is therefore preferable to put this information in the input format configuration file directly. (If you find that this is not possible in your case, please let us know.)</p> <p>Here&#39;s a commented example of indexmetadata.yaml:</p> <div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Display name for the index and short description</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (not used by BlackLab. None of the display name or description values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  are used by BlackLab directly, but applications can retrieve them if they want)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OpenSonar</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The OpenSonar corpus.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># What was the name of the input format first added to this index?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (it is possible to add documents of different formats to the same index,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  so this is not a guarantee that all documents have this format)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">documentFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OpenSonarFolia</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Total number of tokens in this corpus.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">tokenCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Information about the index format and when and how it was created</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (don&#39;t change this)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">versionInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    blackLabBuildTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017-08-01 00:00:00&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    blackLabVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    indexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    timeCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017-07-31 16:03:37&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    timeModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017-07-31 16:03:37&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    alwaysAddClosingToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tagLengthInPayload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Information about annotated (complex) and metadata fields</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">fieldInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    titleField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">title</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # ((optional, detected if omitted); field in the index containing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  document title; may be used by applications)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    authorField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # ((optional) field in the index containing author information;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  may be used by applications)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    dateField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">date</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # ((optional) field in the index containing document date </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  information; may be used by applications)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pidField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # ((optional, recommended) field in the index containing unique </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  document id; may be used by applications to refer to documents;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  may be used by BlackLab to directly update documents without </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  the client having to manually delete the previous version)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    defaultAnalyzerName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DEFAULT</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The type of analyzer to use for metadata fields</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # by default (DEFAULT|whitespace|standard|nontokenizing)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    contentViewable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # is the user allowed to retrieve whole documents? </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    textDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">LTR</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # text direction of the corpus (e.g. LTR/RTL) (not used by BlackLab) </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    documentFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # (not used by BlackLab. may be used by application to </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                #  e.g. select which XSLT to use)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    unknownValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unknown</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # what value to index if field value is unknown [unknown]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    unknownCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NEVER</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # When is a field value considered unknown?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                # (other options: MISSING, EMPTY, MISSING_OR_EMPTY) [NEVER]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Information about specific metadata fields</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    metadataFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Information about the author field</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">author</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      # (optional) How to display in interface</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The author of the document.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # (optional) Description (e.g. tooltip) in interface</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tokenized</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          # ..or text, numeric, untokenized [tokenized]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        analyzer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        # ..(or whitespace|standard|nontokenizing) [default]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        unknownValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unknown</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # overrides default unknownValue for this field</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        unknownCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MISSING_OR_EMPTY</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # overrides default unknownCondition for this field</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uiType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">select</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           # (optional) Widget to use in interface (text|select|range)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># values indexed in this field</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">firstValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">secondValue</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        valueListComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  # are all values listed here, or just a few (max. 50)?</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        displayValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (optional) How to display certain values in this field</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        tolkien</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">J.R.R. Tolkien</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                #   e.g. display value &quot;tolkien&quot; as &quot;J.R.R. Tolkien&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        adams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Douglas Adams</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        displayOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (optional) Specific order to display values in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tolkien</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">adams</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # (optional)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # This block allows you to define groups of metadata fields.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # BlackLab Server will include this information on the index structure page.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # This can be useful if you want to generate a user interface based on index metadata. </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    metadataFieldGroups</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">First group</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">author</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Second group</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">keywords</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    addRemainingFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # plus any fields that weren&#39;t mentioned yet </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Information about annotated fields</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # (these used to be called complex fields, hence the key name;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #  similarly, we used to call annotations &quot;properties&quot;, as you can see below)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    complexFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Information about the contents field</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        mainProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">word</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # main annotation. used for concordances; contains char. offsets</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">contents</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # (optional) how to display in GUI</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The text contents of the document.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        noForwardIndexProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # (optional) space-separated list of annotation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                   # names that shouldn&#39;t get a forward index</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        displayOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (optional) Order to display annotation search fields</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">word</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lemma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pos</span></span></code></pre></div><p>Please note: the settings pidField, titleField, authorField, dateField refer to the name of the field in the Lucene index, not an XML element name.</p>`,130)]))}const c=e(n,[["render",o]]);export{u as __pageData,c as default};
