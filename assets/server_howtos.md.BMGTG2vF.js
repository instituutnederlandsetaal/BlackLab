import{_ as o,c as t,o as a,al as r}from"./chunks/framework.B3j7FRen.js";const p=JSON.parse('{"title":"Tutorials / howtos","description":"","frontmatter":{},"headers":[],"relativePath":"server/howtos.md","filePath":"server/060_howtos.md","lastUpdated":1749114403000}'),i={name:"server/howtos.md"};function s(n,e,c,d,l,h){return a(),t("div",null,e[0]||(e[0]=[r(`<h1 id="tutorials-howtos" tabindex="-1">Tutorials / howtos <a class="header-anchor" href="#tutorials-howtos" aria-label="Permalink to &quot;Tutorials / howtos&quot;">​</a></h1> <h2 id="let-users-manage-their-own-corpora" tabindex="-1">Let users manage their own corpora <a class="header-anchor" href="#let-users-manage-their-own-corpora" aria-label="Permalink to &quot;Let users manage their own corpora&quot;">​</a></h2> <p>If you configure a form of user authentication, you can allow users to manager their own corpora using BlackLab Server or Frontend.</p> <p>BlackLab Server includes support for creating corpora and adding documents to them. We use these features in BlackLab Frontend to allow users to quickly corpus data and search it, without having to set up a BlackLab installation themselves. Here&#39;s a very quick overview.</p> <p>Currently, only private corpora can be created and appended to. This means there must be a logged-in user. The <code>authentication</code> section in <code>blacklab-server.yaml</code> will let you specify what authentication system you&#39;d like to use. See <a href="./configuration.html#authentication-and-authorization">configuration files</a>.</p> <p>Another required setting is <code>userIndexes</code> (in addition to <code>indexLocations</code> which points to the &quot;globally available&quot; corpora). In this directory, user-private corpora will be created. Obviously, the application needs write permissions on this directory.</p> <p>When a user is logged in and you have a <code>userIndexes</code> directory set up, you will see a <code>user</code> section on the BlackLab Server info page (<code>/blacklab-server/</code>) with both <code>loggedIn</code> and <code>canCreateIndex</code> set to <code>true</code>. To see what input formats are supported, look at the <code>/blacklab-server/input-formats/</code> URL.</p> <p>To create a private corpus, <code>POST</code> to <code>/blacklab-server/</code> with parameters <code>name</code> (corpus identifier), <code>display</code> (a human-friendly corpus name) and <code>format</code> (the input format to use for this corpus, e.g. <code>tei</code>). The userId will be prepended to the corpus name, so if your userId is <code>myUserId</code> and you create an corpus name <code>myIndex</code>, the full name will be <code>myUserId:myIndex</code>.</p> <p>To add a file to a private corpus, upload it to <code>/blacklab-server/INDEX_NAME/docs</code> with parameter name <code>data</code>.</p> <p>To remove a private corpus, send a <code>DELETE</code> request to <code>/blacklab-server/INDEX_NAME/</code>.</p> <p>For the details of these endpoints, and the ones below, see <a href="/server/rest-api/#manage-user-corpora">Manage user corpora</a>.</p> <h3 id="adding-removing-user-formats" tabindex="-1">Adding/removing user formats <a class="header-anchor" href="#adding-removing-user-formats" aria-label="Permalink to &quot;Adding/removing user formats&quot;">​</a></h3> <p>To add an input format, upload a <code>.yaml</code> or <code>.json</code> configuration file to the <code>/blacklab-server/input-formats/</code> URL with parameter name <code>data</code>. The file name will become the format name. User formats will be prefixed with the <code>userId</code> and a colon, so if your userId is <code>myUserId</code> and you upload a file <code>myFormatName.blf.yaml</code>, a new format <code>myUserId:myFormatName</code> will be created. Only you will see it in the formats list, but in theory, everyone can use it (this is different from corpora, which are private).</p> <p>To view an input format configuration, use <code>/blacklab-server/input-formats/&lt;format-name&gt;</code>.</p> <p>To remove an input format, send a <code>DELETE</code> request to the format page, e.g. <code>/blacklab-server/input-formats/&lt;format-name&gt;</code>.</p> <h3 id="share-private-corpus-with-a-list-of-users" tabindex="-1">Share private corpus with a list of users <a class="header-anchor" href="#share-private-corpus-with-a-list-of-users" aria-label="Permalink to &quot;Share private corpus with a list of users&quot;">​</a></h3> <p>To see what users (if any) a private corpus is currently shared with, use: <code>/blacklab-server/&lt;corpus-name&gt;/sharing</code>.</p> <p>To set the list of users to share a private corpus with, send a <code>POST</code> request to the same URL with the <code>users[]</code> parameter for each user to share with (that is, you should specify this parameter multiple times, once for each user). You can leave the parameter empty if you don&#39;t want to share the corpus anymore.</p> <p>The sharing information is stored in the corpus directory in a file named <code>.shareWithUsers</code>.</p> <h2 id="lock-files-into-disk-cache" tabindex="-1">Lock files into disk cache <a class="header-anchor" href="#lock-files-into-disk-cache" aria-label="Permalink to &quot;Lock files into disk cache&quot;">​</a></h2> <div class="warning custom-block"><p class="custom-block-title">CAUTION</p> <p>Depending on your requirements and hardware, this may be a bad idea that degrades performance. In general, most users should rely probably on the operating system to effectively cache files, and not try to override it using a tool like <code>vmtouch</code>. This information is still provided in case anyone wants to use <code>vmtouch</code> nonetheless.</p></div> <p>At the Dutch Language Institute, we used to use a tool called <a href="http://hoytech.com/vmtouch/" target="_blank" rel="noreferrer">vmtouch</a> (<a href="https://github.com/hoytech/vmtouch" target="_blank" rel="noreferrer">GitHub</a>) written by Doug Hoyte to &#39;lock&#39; our forward corpora in the operating system&#39;s disk cache, keeping them in memory at all times. This speeds up sorting and grouping operations, as well as generating (large amounts of) KWICs (keyword-in-context results).</p> <p>vmtouch is a tool that can &quot;lock&quot; a file in disk cache. It benefits applications that need to perform fast random access to large files (i.e. several gigabytes). Corpus search applications fall into this domain: they need random access to the &quot;forward corpus&quot; component of the corpus to do fast sorting and grouping.</p> <p>You should be careful to ensure the machine you&#39;re using has enough RAM to keep the required files in memory permanently, and will still have memory left over for the operating system and applications.</p> <p>Also important is to run vmtouch as the root user; user accounts have a limit to the amount of memory they may lock. Vmtouch will terminate with an out of memory error if it hits that limit. (it may be possible to raise this limit for a user by changing a configuration file - we haven&#39;t experimented with this)</p> <p>The <a href="http://hoytech.com/vmtouch/" target="_blank" rel="noreferrer">official page for vmtouch</a> has the C source code and the online manual. We&#39;ve made a slight modification to the source code to allow for larger files to be cached.</p> <h3 id="file-size-limit" tabindex="-1">File size limit <a class="header-anchor" href="#file-size-limit" aria-label="Permalink to &quot;File size limit&quot;">​</a></h3> <p>The original vmtouch had a built-in file size limit (probably as a safety precaution). You may need to raise it (search for o_max_file_size).</p> <h3 id="running-vmtouch" tabindex="-1">Running vmtouch <a class="header-anchor" href="#running-vmtouch" aria-label="Permalink to &quot;Running vmtouch&quot;">​</a></h3> <p>To run vmtouch in daemon mode, so that it will lock files in the disk cache, use the following command line:</p> <pre><code>sudo vmtouch -vtld &lt;list_of_files&gt;
</code></pre> <p>The switches: v=verbose, t=touch (load into disk cache), l=lock (lock in disk cache), d=daemon (keep the program running). For example, we use the following command line to keep all four forward corpora of our BlackLab corpus locked in disk cache (run from within the corpus directory):</p> <pre><code>sudo vmtouch -vtld fi_contents%word/tokens.dat fi_contents%lemma/tokens.dat \\
    fi_contents%pos/tokens.dat fi_contents%punct/tokens.dat
</code></pre> <p>The daemon will start up and will take a while to load all files into disk cache. You can check its progress by only specifying the -v option:</p> <pre><code>sudo vmtouch -v fi_contents%word/tokens.dat fi_contents%lemma/tokens.dat \\
    fi_contents%pos/tokens.dat fi_contents%punct/tokens.dat
</code></pre>`,69)]))}const m=o(i,[["render",s]]);export{p as __pageData,m as default};
